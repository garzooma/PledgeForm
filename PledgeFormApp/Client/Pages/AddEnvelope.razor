@page "/addenvelope"
@using PledgeFormApp.Shared
@inject HttpClient Http

<h1>CSS EXample</h1>

<div class="col-12 style1">
    <p>Applying Style 1</p>
</div>
<div class="col-12 style2">
    <p>Applying Style 2</p>
</div>
<div class="col-12 style3">
    <p>Applying Style 3</p>
</div>

<h3>Add Envelope</h3>

@if (pledgerList == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm Model=@envelope OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <div class="form-group">
            <label class="enter-label" for="Name">Pledger</label>
            <!--
                <InputNumber @bind-Value=envelope.PledgerId class="form-control" id="Id" />
            -->
            <InputSelect @bind-Value=envelope.PledgerId class="form-control" id="Id" style="width: 150px">
                @{
                        foreach (var value in pledgerList)
                        {
                        <option value="@value.ID">@value.Name</option>
                        }
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="Age">Envelope Number</label>
            <InputNumber @bind-Value=envelope.EnvelopeNum class="form-control" id="Number" />
        </div>
        <div class="form-group">
            <label for="QBName">Year</label>
            <InputNumber @bind-Value=envelope.Year class="form-control" id="Year" />
        </div>
        <input type="submit" class="btn btn-primary edit-btn" value="Save" />
    </EditForm>
    <div class="alert @StatusClass">@Message</div>
}

@code {

    [Inject]
    Services.IEnvelopeDataService EnvelopeDataService { get; set; }
    Envelope envelope;

    [Inject]
    Services.IPledgerDataService PledgerDataService { get; set; }
    private IEnumerable<Pledger> pledgerList;

    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        envelope = new Envelope();
        pledgerList = await PledgerDataService.GetAllPledgers();
        await Task.CompletedTask;
    }


    protected async Task HandleValidSubmit()
    {
        await EnvelopeDataService.AddEnvelope(envelope);
        StatusClass = "alert-success";
        Message = "New Envelope submitted.";
    }


    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors.  Please try again.";
    }
}
